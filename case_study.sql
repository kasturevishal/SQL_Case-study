create database feb24;
use feb24;

select * from fact ;
select * from location;
select * from product;

-- 1. Display the number of states present in theLocationTable.
select count(distinct(State)) from location; -- 20
select distinct(State) from location;

-- 2. Howmany products are of regular type?
select * from product 
where Type="Regular" ;

 -- 3. Howmuch spending has been done on marketing of product ID1?
select sum(Marketing) from fact
where Productid = 1 ;      -- 4658

-- 4. What is the minimum sales of a product?
select min(sales) from fact ; -- 17

-- 5. Display the max Cost of Good Sold (COGS).
select max(COGS) from fact ; -- 364

-- 6. Display the details of the product where product type is coffee.
select * from product
where `Product Type` = "Coffee";

-- 7. Display the details where total expenses are greater than 40.
select * from fact 
where `Total Expenses` > 40;

-- 8. What is the average sales in area code 719?
select avg(Sales) from fact
where `Area Code` = 719;  -- 186.5833

-- 9. Find out the total profit generated by Colorado state.
select sum(f.Profit) as TotalProfit from fact f
join location l
on f.`Area Code` = l.`Area Code`
where  l.state = "Colorado" ; -- 17743

-- 10. Display the average inventory for each product ID.
select ProductId, avg(Inventory) as Avg_Inventory  from fact
group by ProductId ;

-- 11. Display state in a sequential order in a Location Table.
select state from location order by state ;
SELECT DISTINCT state FROM Location ORDER BY state ASC;

-- 12. Display the average budget of the Product where the average budget margin should be greater than 100.
select ProductId, avg(`Budget Sales`) as Avg_Budget from fact 
group by ProductId
having avg(`Budget Margin`) > 100 ;

-- 13. What is the total sales done on date 2010-01-01?
select sum(Sales) as total_sales from fact
where Date = '1/1/2010' ;   -- 31555

-- 	14. Display the average total expense of each product ID on an individual date.
select ProductId, Date, avg(`Total Expenses`) from fact
group by  ProductId, Date ;

--  15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.
select f.Date, f.ProductId, p.`Product Type`, p.Product, f.Sales, f.Profit, l.State, f.`Area Code` from fact f
join location l on l.`Area Code` = f.`Area Code`
join product p on p.ProductId = f.ProductId ;

-- 16. Display the rank without any gap to show the sales wise rank.
SELECT sales, DENSE_RANK() OVER (ORDER BY sales DESC) AS SalesRank FROM fact;
SELECT 
    f1.sales,
    (SELECT COUNT(DISTINCT f2.sales) 
     FROM fact AS f2 
     WHERE f2.sales > f1.sales) + 1 AS SalesRank
FROM fact AS f1
ORDER BY f1.sales DESC;

-- 17. Find the state wise profit and sales.
select l.state, sum(f.sales) as Sales, sum(f.profit) as Profit from fact f
join location l on l.`Area Code` = f.`Area Code`
group by state ;

-- 18. Find the state wise profit and sales along with the productname.
select l.state, p.Product, sum(f.sales) as Sales, sum(f.profit) as Profit from fact f
join location l on l.`Area Code` = f.`Area Code`
join product p on p.ProductId = f.ProductId
group by l.state, p.Product ;


-- 19. If there is an increase in sales of 5%, calculate the increasedsales.
SELECT ProductId, Sales, Sales * 1.05 AS IncreasedSales 
FROM fact;

--  20. Find the maximum profit along with the product ID and producttype. 
SELECT f.ProductId, p.`Product Type`, f.Profit 
FROM fact f 
JOIN product p ON f.ProductId = p.ProductId
WHERE Profit = (SELECT MAX(Profit) FROM fact);

-- 21. Create a stored procedure to fetch the result according to the product type from Product Table. 
DELIMITER //
CREATE PROCEDURE GetProductsByType(IN productType VARCHAR(50))
BEGIN
    SELECT * FROM product WHERE `Product Type` = productType;
END //
DELIMITER ;

CALL GetProductsByType('Beverage');

-- 22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss. 
SELECT `Total Expenses`, 
       CASE WHEN `Total Expenses` < 60 THEN 'Profit' ELSE 'Loss' END AS Profit_Loss 
FROM fact;

-- 23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order. 
SELECT `Date`, ProductId, SUM(Sales) AS TotalSales 
FROM fact 
GROUP BY `Date`, ProductId WITH ROLLUP;

-- 24. Apply union and intersection operator on the tables which consist of attribute area code. 
SELECT `Area Code` FROM fact
UNION
SELECT `Area Code` FROM location;

SELECT f.`Area Code` 
FROM fact f 
INNER JOIN location l ON f.`Area Code` = l.`Area Code`;

-- 25. Create a user-defined function for the product table to fetch a particular product type based upon the userâ€™s preference. 
DELIMITER //
CREATE FUNCTION GetProductByType(pType VARCHAR(50)) RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
    DECLARE result VARCHAR(255);
    SELECT GROUP_CONCAT(Product) INTO result FROM product WHERE `Product Type` = pType;
    RETURN result;
END //
DELIMITER ;

SELECT GetProductByType('Beverage');

-- 26. Change the product type from coffee to tea where product ID is 1 and undoit. 
-- Change Coffee to Tea
SET SQL_SAFE_UPDATES = 0;

UPDATE product 
SET `Product Type` = 'Tea' 
WHERE ProductId = 1;

-- Undo the change
UPDATE product 
SET `Product Type` = 'Coffee' 
WHERE ProductId = 1;

-- 27. Display the date, product ID and sales where total expenses are between 100 to 200. 
SELECT `Date`, ProductId, Sales 
FROM fact 
WHERE `Total Expenses` BETWEEN 100 AND 200;

-- 28. Delete the records in the Product Table for regular type. 
DELETE FROM product WHERE `Type` = 'Regular';

-- 29. Display the ASCII value of the fifth character from the columnProdut.
SELECT Product, ASCII(SUBSTRING(Product, 5, 1)) AS FifthCharASCII 
FROM product;
